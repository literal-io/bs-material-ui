// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require('bs-platform/lib/js/curry.js');
var Js_boolean = require('bs-platform/lib/js/js_boolean.js');
var ReasonReact = require('reason-react/src/ReasonReact.js');
var Card = require('material-ui/Card');
var Chip = require('material-ui/Chip');
var Form = require('material-ui/Form');
var Grid = require('material-ui/Grid');
var Icon = require('material-ui/Icon');
var List = require('material-ui/List');
var Menu = require('material-ui/Menu');
var Js_null_undefined = require('bs-platform/lib/js/js_null_undefined.js');
var Badge = require('material-ui/Badge');
var Input = require('material-ui/Input');
var Paper = require('material-ui/Paper');
var Table = require('material-ui/Table');
var AppBar = require('material-ui/AppBar');
var Avatar = require('material-ui/Avatar');
var Button = require('material-ui/Button');
var Dialog = require('material-ui/Dialog');
var Drawer = require('material-ui/Drawer');
var Select = require('material-ui/Select');
var Divider = require('material-ui/Divider');
var Toolbar = require('material-ui/Toolbar');
var Tooltip = require('material-ui/Tooltip');
var Checkbox = require('material-ui/Checkbox');
var Progress = require('material-ui/Progress');
var Snackbar = require('material-ui/Snackbar');
var TextField = require('material-ui/TextField');
var ButtonBase = require('material-ui/ButtonBase');
var IconButton = require('material-ui/IconButton');
var Typography = require('material-ui/Typography');
var Slide = require('material-ui/transitions/Slide');
var Collapse = require('material-ui/transitions/Collapse');

function unwrapValue(r) {
  return r[1];
}

function unwrap_bool(b) {
  if (b) {
    return Js_boolean.to_js_boolean(b[0]);
  } else {
    return undefined;
  }
}

function option_map(fn, option) {
  if (option) {
    return /* Some */ [Curry._1(fn, option[0])];
  } else {
    return /* None */ 0;
  }
}

function make(position, color, classes, style, className, children) {
  return ReasonReact.wrapJsForReason(
    AppBar.default,
    {
      position: Js_null_undefined.from_opt(position),
      color: Js_null_undefined.from_opt(color),
      classes: Js_null_undefined.from_opt(classes),
      style: Js_null_undefined.from_opt(style),
      className: Js_null_undefined.from_opt(className),
    },
    children,
  );
}

var AppBar$1 = /* module */ [/* make */ make];

function make$1(
  alt,
  className,
  classes,
  childrenClassName,
  component,
  imgProps,
  sizes,
  src,
  srcSet,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Avatar.default,
    {
      alt: Js_null_undefined.from_opt(alt),
      childrenClassName: Js_null_undefined.from_opt(childrenClassName),
      className: Js_null_undefined.from_opt(className),
      classes: Js_null_undefined.from_opt(classes),
      component: Js_null_undefined.from_opt(component),
      imgProps: Js_null_undefined.from_opt(imgProps),
      sizes: Js_null_undefined.from_opt(sizes),
      src: Js_null_undefined.from_opt(src),
      srcSet: Js_null_undefined.from_opt(srcSet),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var Avatar$1 = /* module */ [/* make */ make$1];

function make$2(badgeContent, style, children) {
  return ReasonReact.wrapJsForReason(
    Badge.default,
    {
      badgeContent: badgeContent,
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var Badge$1 = /* module */ [/* make */ make$2];

function make$3(
  style,
  onClick,
  component,
  className,
  centerRipple,
  disableRipple,
  focusRipple,
  disabled,
  children,
) {
  return ReasonReact.wrapJsForReason(
    ButtonBase.default,
    {
      focusRipple: unwrap_bool(focusRipple),
      centerRipple: unwrap_bool(centerRipple),
      disableRipple: unwrap_bool(disableRipple),
      disabled: unwrap_bool(disabled),
      onClick: Js_null_undefined.from_opt(onClick),
      component: Js_null_undefined.from_opt(component),
      className: Js_null_undefined.from_opt(className),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var ButtonBase$1 = /* module */ [/* make */ make$3];

function to_string(param) {
  switch (param) {
    case 0:
      return 'default';
    case 1:
      return 'inherit';
    case 2:
      return 'primary';
    case 3:
      return 'contrast';
    case 4:
      return 'accent';
  }
}

var Color = /* module */ [/* to_string */ to_string];

function make$4(
  classes,
  className,
  color,
  component,
  dense,
  disabled,
  disableFocusRipple,
  disableRipple,
  fab,
  href,
  raised,
  _type,
  onClick,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Button.default,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      color: Js_null_undefined.from_opt(option_map(to_string, color)),
      component: Js_null_undefined.from_opt(component),
      dense: unwrap_bool(dense),
      disabled: unwrap_bool(disabled),
      disableFocusRipple: unwrap_bool(disableFocusRipple),
      disableRipple: unwrap_bool(disableRipple),
      fab: unwrap_bool(fab),
      href: Js_null_undefined.from_opt(href),
      raised: unwrap_bool(raised),
      type: Js_null_undefined.from_opt(_type),
      onClick: Js_null_undefined.from_opt(onClick),
    },
    children,
  );
}

var Button$1 = /* module */ [/* Color */ Color, /* make */ make$4];

function make$5(disableActionSpacing, style, children) {
  return ReasonReact.wrapJsForReason(
    Card.CardActions,
    {
      disableActionSpacing: unwrap_bool(disableActionSpacing),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var CardActions = /* module */ [/* make */ make$5];

function make$6(style, children) {
  return ReasonReact.wrapJsForReason(
    Card.CardContent,
    {
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var CardContent = /* module */ [/* make */ make$6];

function make$7(
  action,
  avatar,
  classes,
  className,
  style,
  title,
  subheader,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Card.CardHeader,
    {
      action: Js_null_undefined.from_opt(action),
      avatar: Js_null_undefined.from_opt(avatar),
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      style: Js_null_undefined.from_opt(style),
      subheader: Js_null_undefined.from_opt(subheader),
      title: Js_null_undefined.from_opt(title),
    },
    children,
  );
}

var CardHeader = /* module */ [/* make */ make$7];

function make$8(style, image, children) {
  return ReasonReact.wrapJsForReason(
    Card.CardMedia,
    {
      style: Js_null_undefined.from_opt(style),
      image: Js_null_undefined.from_opt(image),
    },
    children,
  );
}

var CardMedia = /* module */ [/* make */ make$8];

function make$9(raised, style, className, children) {
  return ReasonReact.wrapJsForReason(
    Card.default,
    {
      raised: unwrap_bool(raised),
      style: Js_null_undefined.from_opt(style),
      className: Js_null_undefined.from_opt(className),
    },
    children,
  );
}

var Card$1 = /* module */ [/* make */ make$9];

function make$10(
  classes,
  className,
  checked,
  checkedClassName,
  checkedIcon,
  disableRipple,
  disabled,
  disabledClassName,
  icon,
  indeterminate,
  indeterminateIcon,
  name,
  onChange,
  value,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Checkbox.default,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      checked: unwrap_bool(checked),
      checkedClassName: Js_null_undefined.from_opt(checkedClassName),
      checkedIcon: Js_null_undefined.from_opt(checkedIcon),
      disableRipple: unwrap_bool(disableRipple),
      disabled: unwrap_bool(disabled),
      disabledClassName: Js_null_undefined.from_opt(disabledClassName),
      icon: Js_null_undefined.from_opt(icon),
      indeterminate: unwrap_bool(indeterminate),
      indeterminateIcon: Js_null_undefined.from_opt(indeterminateIcon),
      name: Js_null_undefined.from_opt(name),
      onChange: Js_null_undefined.from_opt(onChange),
      value: Js_null_undefined.from_opt(value),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var Checkbox$1 = /* module */ [/* make */ make$10];

function make$11(
  avatar,
  className,
  classes,
  deleteIcon,
  label,
  onClick,
  onKeyDown,
  onRequestDelete,
  style,
  tabIndex,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Chip.default,
    {
      avatar: Js_null_undefined.from_opt(avatar),
      className: Js_null_undefined.from_opt(className),
      classes: Js_null_undefined.from_opt(classes),
      deleteIcon: Js_null_undefined.from_opt(deleteIcon),
      label: Js_null_undefined.from_opt(label),
      onClick: Js_null_undefined.from_opt(onClick),
      onKeyDown: Js_null_undefined.from_opt(onKeyDown),
      onRequestDelete: Js_null_undefined.from_opt(onRequestDelete),
      style: Js_null_undefined.from_opt(style),
      tabIndex: Js_null_undefined.from_opt(option_map(unwrapValue, tabIndex)),
    },
    children,
  );
}

var Chip$1 = /* module */ [/* make */ make$11];

function make$12(
  style,
  className,
  classes,
  color,
  value,
  valueBuffer,
  mode,
  size,
  max,
  min,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Progress.CircularProgress,
    {
      style: Js_null_undefined.from_opt(style),
      mode: Js_null_undefined.from_opt(mode),
      classes: Js_null_undefined.from_opt(classes),
      color: Js_null_undefined.from_opt(color),
      valueBuffer: Js_null_undefined.from_opt(valueBuffer),
      value: Js_null_undefined.from_opt(value),
      size: Js_null_undefined.from_opt(size),
      max: Js_null_undefined.from_opt(max),
      min: Js_null_undefined.from_opt(min),
      className: Js_null_undefined.from_opt(className),
    },
    children,
  );
}

var CircularProgress = /* module */ [/* make */ make$12];

function make$13(expanded, transitionDuration, children) {
  return ReasonReact.wrapJsForReason(
    Collapse.default,
    {
      in: unwrap_bool(expanded),
      transitionDuration: Js_null_undefined.from_opt(transitionDuration),
    },
    children,
  );
}

var Collapse$1 = /* module */ [/* make */ make$13];

function make$14(classes, children) {
  return ReasonReact.wrapJsForReason(
    Dialog.DialogActions,
    {
      classes: Js_null_undefined.from_opt(classes),
    },
    children,
  );
}

var DialogActions = /* module */ [/* make */ make$14];

function make$15(style, children) {
  return ReasonReact.wrapJsForReason(
    Dialog.DialogContentText,
    {
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var DialogContentText = /* module */ [/* make */ make$15];

function make$16(classes, style, children) {
  return ReasonReact.wrapJsForReason(
    Dialog.DialogContent,
    {
      classes: Js_null_undefined.from_opt(classes),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var DialogContent = /* module */ [/* make */ make$16];

function make$17(classes, disableTypography, children) {
  return ReasonReact.wrapJsForReason(
    Dialog.DialogTitle,
    {
      classes: Js_null_undefined.from_opt(classes),
      disableTypography: Js_null_undefined.from_opt(disableTypography),
    },
    children,
  );
}

var DialogTitle = /* module */ [/* make */ make$17];

function make$18(
  classes,
  enterTransitionDuration,
  leaveTransitionDuration,
  fullScreen,
  ignoreBackdropClick,
  ignoreEscapeKeyUp,
  style,
  onBackdropClick,
  onEnter,
  onEntered,
  onEntering,
  onEscapeKeyUp,
  onExit,
  onExited,
  onExiting,
  onClose,
  openDialog,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Dialog.default,
    {
      style: Js_null_undefined.from_opt(style),
      classes: Js_null_undefined.from_opt(classes),
      fullScreen: Js_null_undefined.from_opt(fullScreen),
      leaveTransitionDuration: Js_null_undefined.from_opt(
        leaveTransitionDuration,
      ),
      enterTransitionDuration: Js_null_undefined.from_opt(
        enterTransitionDuration,
      ),
      ignoreEscapeKeyUp: Js_null_undefined.from_opt(ignoreEscapeKeyUp),
      ignoreBackdropClick: Js_null_undefined.from_opt(ignoreBackdropClick),
      onBackdropClick: Js_null_undefined.from_opt(onBackdropClick),
      onEnter: Js_null_undefined.from_opt(onEnter),
      onEntered: Js_null_undefined.from_opt(onEntered),
      onEntering: Js_null_undefined.from_opt(onEntering),
      onEscapeKeyUp: Js_null_undefined.from_opt(onEscapeKeyUp),
      onExit: Js_null_undefined.from_opt(onExit),
      onExited: Js_null_undefined.from_opt(onExited),
      onExiting: Js_null_undefined.from_opt(onExiting),
      onClose: Js_null_undefined.from_opt(onClose),
      open: Js_null_undefined.from_opt(openDialog),
    },
    children,
  );
}

var Dialog$1 = /* module */ [/* make */ make$18];

function make$19(inset, light, absolute, className, children) {
  return ReasonReact.wrapJsForReason(
    Divider.default,
    {
      light: unwrap_bool(light),
      inset: unwrap_bool(inset),
      absolute: unwrap_bool(absolute),
      className: Js_null_undefined.from_opt(className),
    },
    children,
  );
}

var Divider$1 = /* module */ [/* make */ make$19];

function to_string$1(param) {
  switch (param) {
    case 0:
      return 'left';
    case 1:
      return 'top';
    case 2:
      return 'right';
    case 3:
      return 'bottom';
  }
}

var Anchor = /* module */ [/* to_string */ to_string$1];

function to_string$2(param) {
  switch (param) {
    case 0:
      return 'permanent';
    case 1:
      return 'persistent';
    case 2:
      return 'temporary';
  }
}

var Type = /* module */ [/* to_string */ to_string$2];

function make$20(
  anchor,
  classes,
  className,
  elevation,
  transitionDuration,
  modalProps,
  onClose,
  _open,
  slideProps,
  _type,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Drawer.default,
    {
      anchor: Js_null_undefined.from_opt(option_map(to_string$1, anchor)),
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      elevation: Js_null_undefined.from_opt(elevation),
      transitionDuration: Js_null_undefined.from_opt(transitionDuration),
      ModalProps: Js_null_undefined.from_opt(modalProps),
      onClose: Js_null_undefined.from_opt(onClose),
      open: unwrap_bool(_open),
      SlideProps: Js_null_undefined.from_opt(slideProps),
      type: Js_null_undefined.from_opt(option_map(to_string$2, _type)),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var Drawer$1 = /* module */ [
  /* Anchor */ Anchor,
  /* Type */ Type,
  /* make */ make$20,
];

function to_string$3(param) {
  switch (param) {
    case 0:
      return 'none';
    case 1:
      return 'dense';
    case 2:
      return 'normal';
  }
}

var Margin = /* module */ [/* to_string */ to_string$3];

function make$21(
  classes,
  className,
  component,
  disabled,
  error,
  fullWidth,
  onBlur,
  onFocus,
  required,
  margin,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Form.FormControl,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      component: Js_null_undefined.from_opt(component),
      disabled: unwrap_bool(disabled),
      error: unwrap_bool(error),
      fullWidth: unwrap_bool(fullWidth),
      onBlur: Js_null_undefined.from_opt(onBlur),
      onFocus: Js_null_undefined.from_opt(onFocus),
      required: unwrap_bool(required),
      margin: Js_null_undefined.from_opt(option_map(to_string$3, margin)),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var FormControl = /* module */ [/* make */ make$21];

function make$22(
  checked,
  classes,
  className,
  control,
  disabled,
  inputRef,
  label,
  name,
  onChange,
  value,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Form.FormControlLabel,
    {
      checked: Js_null_undefined.from_opt(checked),
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      control: Js_null_undefined.from_opt(control),
      disabled: unwrap_bool(disabled),
      inputRef: Js_null_undefined.from_opt(inputRef),
      label: Js_null_undefined.from_opt(label),
      name: Js_null_undefined.from_opt(name),
      onChange: Js_null_undefined.from_opt(onChange),
      value: Js_null_undefined.from_opt(value),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var FormControlLabel = /* module */ [/* make */ make$22];

function make$23(classes, className, row, style, children) {
  return ReasonReact.wrapJsForReason(
    Form.FormGroup,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      row: unwrap_bool(row),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var FormGroup = /* module */ [/* make */ make$23];

function make$24(classes, className, disabled, error, margin, style, children) {
  return ReasonReact.wrapJsForReason(
    Form.FormHelperText,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      disabled: unwrap_bool(disabled),
      error: unwrap_bool(error),
      margin: Js_null_undefined.from_opt(option_map(to_string$3, margin)),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var FormHelperText = /* module */ [/* make */ make$24];

function make$25(
  classes,
  className,
  component,
  disabled,
  error,
  focused,
  required,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Form.FormLabel,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      component: Js_null_undefined.from_opt(component),
      disabled: unwrap_bool(disabled),
      error: unwrap_bool(error),
      focused: unwrap_bool(focused),
      required: unwrap_bool(required),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var FormLabel = /* module */ [/* make */ make$25];

function make$26(
  align,
  component,
  direction,
  wrap,
  justify,
  xl,
  lg,
  md,
  sm,
  xs,
  spacing,
  container,
  item,
  className,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Grid.default,
    {
      container: unwrap_bool(container),
      item: unwrap_bool(item),
      style: Js_null_undefined.from_opt(style),
      className: Js_null_undefined.from_opt(className),
      align: Js_null_undefined.from_opt(align),
      component: Js_null_undefined.from_opt(component),
      direction: Js_null_undefined.from_opt(direction),
      wrap: Js_null_undefined.from_opt(wrap),
      justify: Js_null_undefined.from_opt(justify),
      xl: Js_null_undefined.from_opt(xl),
      lg: Js_null_undefined.from_opt(lg),
      md: Js_null_undefined.from_opt(md),
      sm: Js_null_undefined.from_opt(sm),
      xs: Js_null_undefined.from_opt(xs),
      spacing: Js_null_undefined.from_opt(spacing),
      wrp: Js_null_undefined.from_opt(wrap),
    },
    children,
  );
}

var Grid$1 = /* module */ [/* make */ make$26];

function to_string$4(param) {
  switch (param) {
    case 0:
      return 'default';
    case 1:
      return 'inherit';
    case 2:
      return 'primary';
    case 3:
      return 'contrast';
    case 4:
      return 'accent';
  }
}

var Color$1 = /* module */ [/* to_string */ to_string$4];

function make$27(classes, color, style, children) {
  return ReasonReact.wrapJsForReason(
    Icon.default,
    {
      classes: Js_null_undefined.from_opt(classes),
      color: Js_null_undefined.from_opt(option_map(to_string$4, color)),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var Icon$1 = /* module */ [/* Color */ Color$1, /* make */ make$27];

function make$28(
  classes,
  className,
  color,
  disabled,
  disableRipple,
  style,
  onClick,
  children,
) {
  return ReasonReact.wrapJsForReason(
    IconButton.default,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      color: Js_null_undefined.from_opt(option_map(to_string$4, color)),
      disableRipple: unwrap_bool(disableRipple),
      disabled: unwrap_bool(disabled),
      style: Js_null_undefined.from_opt(style),
      onClick: Js_null_undefined.from_opt(onClick),
    },
    children,
  );
}

var IconButton$1 = /* module */ [/* make */ make$28];

function make$29(
  classes,
  className,
  disableAnimation,
  disabled,
  error,
  _FormControlClasses,
  focused,
  htmlFor,
  margin,
  required,
  shrink,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Input.InputLabel,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      disableAnimation: unwrap_bool(disableAnimation),
      disabled: unwrap_bool(disabled),
      error: unwrap_bool(error),
      FormControlClasses: Js_null_undefined.from_opt(_FormControlClasses),
      focused: unwrap_bool(focused),
      htmlFor: Js_null_undefined.from_opt(htmlFor),
      margin: Js_null_undefined.from_opt(option_map(to_string$3, margin)),
      required: unwrap_bool(required),
      shrink: unwrap_bool(shrink),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var InputLabel = /* module */ [/* make */ make$29];

function make$30(
  disableUnderline,
  disabled,
  error,
  id,
  autoFocus,
  fullWidth,
  style,
  value,
  onChange,
  placeholder,
  className,
  inputType,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Input.default,
    {
      disableUnderline: unwrap_bool(disableUnderline),
      disabled: unwrap_bool(disabled),
      error: unwrap_bool(error),
      id: Js_null_undefined.from_opt(id),
      fullWidth: unwrap_bool(fullWidth),
      autoFocus: unwrap_bool(autoFocus),
      style: Js_null_undefined.from_opt(style),
      placeholder: Js_null_undefined.from_opt(placeholder),
      className: Js_null_undefined.from_opt(className),
      type: Js_null_undefined.from_opt(inputType),
      value: Js_null_undefined.from_opt(value),
      onChange: Js_null_undefined.from_opt(onChange),
    },
    children,
  );
}

var Input$1 = /* module */ [/* make */ make$30];

function make$31(
  style,
  classes,
  className,
  color,
  value,
  valueBuffer,
  mode,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Progress.LinearProgress,
    {
      classes: Js_null_undefined.from_opt(classes),
      style: Js_null_undefined.from_opt(style),
      mode: Js_null_undefined.from_opt(mode),
      color: Js_null_undefined.from_opt(color),
      valueBuffer: Js_null_undefined.from_opt(valueBuffer),
      value: Js_null_undefined.from_opt(value),
      className: Js_null_undefined.from_opt(className),
    },
    children,
  );
}

var LinearProgress = /* module */ [/* make */ make$31];

function make$32(classes, className, style, children) {
  return ReasonReact.wrapJsForReason(
    List.ListItemAvatar,
    {
      classes: Js_null_undefined.from_opt(classes),
      style: Js_null_undefined.from_opt(style),
      className: Js_null_undefined.from_opt(className),
    },
    children,
  );
}

var ListItemAvatar = /* module */ [/* make */ make$32];

function make$33(classes, className, style, children) {
  return ReasonReact.wrapJsForReason(
    List.ListItemIcon,
    {
      classes: Js_null_undefined.from_opt(classes),
      style: Js_null_undefined.from_opt(style),
      className: Js_null_undefined.from_opt(className),
    },
    children,
  );
}

var ListItemIcon = /* module */ [/* make */ make$33];

function make$34(classes, className, style, children) {
  return ReasonReact.wrapJsForReason(
    List.ListItemSecondaryAction,
    {
      classes: Js_null_undefined.from_opt(classes),
      style: Js_null_undefined.from_opt(style),
      className: Js_null_undefined.from_opt(className),
    },
    children,
  );
}

var ListItemSecondaryAction = /* module */ [/* make */ make$34];

function make$35(
  classes,
  className,
  disableTypography,
  inset,
  primary,
  secondary,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    List.ListItemText,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      disableTypography: unwrap_bool(disableTypography),
      inset: unwrap_bool(inset),
      primary: Js_null_undefined.from_opt(primary),
      secondary: Js_null_undefined.from_opt(secondary),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var ListItemText = /* module */ [/* make */ make$35];

function make$36(
  button,
  classes,
  className,
  component,
  dense,
  disabled,
  disableGutters,
  divider,
  style,
  onClick,
  href,
  children,
) {
  return ReasonReact.wrapJsForReason(
    List.ListItem,
    {
      button: unwrap_bool(button),
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      component: Js_null_undefined.from_opt(component),
      dense: unwrap_bool(dense),
      disabled: unwrap_bool(disabled),
      disableGutters: unwrap_bool(disableGutters),
      divider: unwrap_bool(divider),
      style: Js_null_undefined.from_opt(style),
      onClick: Js_null_undefined.from_opt(onClick),
      href: Js_null_undefined.from_opt(href),
    },
    children,
  );
}

var ListItem = /* module */ [/* make */ make$36];

function to_string$5(param) {
  switch (param) {
    case 0:
      return 'default';
    case 1:
      return 'inherit';
    case 2:
      return 'primary';
  }
}

var Color$2 = /* module */ [/* to_string */ to_string$5];

function make$37(
  classes,
  className,
  color,
  disableSticky,
  inset,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    List.ListSubheader,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      color: Js_null_undefined.from_opt(option_map(to_string$5, color)),
      disableSticky: unwrap_bool(disableSticky),
      inset: unwrap_bool(inset),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var ListSubheader = /* module */ [/* Color */ Color$2, /* make */ make$37];

function make$38(
  classes,
  className,
  component,
  dense,
  disablePadding,
  subheader,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    List.default,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      component: Js_null_undefined.from_opt(component),
      dense: unwrap_bool(dense),
      disablePadding: unwrap_bool(disablePadding),
      subheader: Js_null_undefined.from_opt(subheader),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var List$1 = /* module */ [/* make */ make$38];

function make$39(
  anchorEl,
  classes,
  className,
  onClose,
  open_,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Menu.default,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      onClose: Js_null_undefined.from_opt(onClose),
      open: unwrap_bool(open_),
      anchorEl: Js_null_undefined.from_opt(anchorEl),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var Menu$1 = /* module */ [/* make */ make$39];

function make$40(
  classes,
  className,
  component,
  role,
  selected,
  onClick,
  style,
  value,
  dense,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Menu.MenuItem,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      component: Js_null_undefined.from_opt(component),
      role: Js_null_undefined.from_opt(role),
      selected: unwrap_bool(selected),
      dense: unwrap_bool(dense),
      onClick: Js_null_undefined.from_opt(onClick),
      style: Js_null_undefined.from_opt(style),
      value: Js_null_undefined.from_opt(option_map(unwrapValue, value)),
    },
    children,
  );
}

var MenuItem = /* module */ [/* make */ make$40];

function make$41(
  classes,
  className,
  component,
  elevation,
  square,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Paper.default,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      component: Js_null_undefined.from_opt(component),
      elevation: Js_null_undefined.from_opt(elevation),
      square: unwrap_bool(square),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var Paper$1 = /* module */ [/* make */ make$41];

function make$42(
  autoWidth,
  classes,
  className,
  displayEmpty,
  input,
  inputClasses,
  $$native,
  multiple,
  menuProps,
  value,
  style,
  disableUnderline,
  disabled,
  error,
  autoFocus,
  fullWidth,
  onChange,
  placeholder,
  inputType,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Select.default,
    {
      autoWidth: unwrap_bool(autoWidth),
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      displayEmpty: unwrap_bool(displayEmpty),
      input: Js_null_undefined.from_opt(input),
      InputClasses: Js_null_undefined.from_opt(inputClasses),
      native: unwrap_bool($$native),
      multiple: unwrap_bool(multiple),
      MenuProps: Js_null_undefined.from_opt(menuProps),
      value: Js_null_undefined.from_opt(option_map(unwrapValue, value)),
      style: Js_null_undefined.from_opt(style),
      disableUnderline: unwrap_bool(disableUnderline),
      disabled: unwrap_bool(disabled),
      error: unwrap_bool(error),
      fullWidth: unwrap_bool(fullWidth),
      autoFocus: unwrap_bool(autoFocus),
      placeholder: Js_null_undefined.from_opt(placeholder),
      type: Js_null_undefined.from_opt(inputType),
      onChange: Js_null_undefined.from_opt(onChange),
    },
    children,
  );
}

var Select$1 = /* module */ [/* make */ make$42];

function to_string$6(param) {
  switch (param) {
    case 0:
      return 'up';
    case 1:
      return 'down';
    case 2:
      return 'left';
    case 3:
      return 'right';
  }
}

var Direction = /* module */ [/* to_string */ to_string$6];

function make$43(in_, direction_, timeout, style, onExit, children) {
  return ReasonReact.wrapJsForReason(
    Slide.default,
    {
      in: unwrap_bool(in_),
      direction: Js_null_undefined.from_opt(
        option_map(to_string$6, direction_),
      ),
      timeout: Js_null_undefined.from_opt(timeout),
      onExit: Js_null_undefined.from_opt(onExit),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var Slide$1 = /* module */ [/* Direction */ Direction, /* make */ make$43];

function toObject(param) {
  switch (param) {
    case 0:
      return {
        vertical: 'top',
        horizontal: 'right',
      };
    case 1:
      return {
        vertical: 'top',
        horizontal: 'center',
      };
    case 2:
      return {
        vertical: 'top',
        horizontal: 'left',
      };
    case 3:
      return {
        vertical: 'bottom',
        horizontal: 'right',
      };
    case 4:
      return {
        vertical: 'bottom',
        horizontal: 'center',
      };
    case 5:
      return {
        vertical: 'bottom',
        horizontal: 'left',
      };
  }
}

var AnchorOrigin = /* module */ [/* toObject */ toObject];

function make$44(
  open_,
  anchorOrigin,
  autoHideDuration,
  onClose,
  onExit,
  onExited,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Snackbar.default,
    {
      open: unwrap_bool(open_),
      autoHideDuration: Js_null_undefined.from_opt(autoHideDuration),
      onClose: Js_null_undefined.from_opt(onClose),
      onExit: Js_null_undefined.from_opt(onExit),
      onExited: Js_null_undefined.from_opt(onExited),
      style: Js_null_undefined.from_opt(style),
      anchorOrigin: Js_null_undefined.from_opt(
        option_map(toObject, anchorOrigin),
      ),
    },
    children,
  );
}

var Snackbar$1 = /* module */ [
  /* AnchorOrigin */ AnchorOrigin,
  /* make */ make$44,
];

function make$45(classes, className, component, style, children) {
  return ReasonReact.wrapJsForReason(
    Table.TableBody,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      component: Js_null_undefined.from_opt(component),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var TableBody = /* module */ [/* make */ make$45];

function to_string$7(param) {
  switch (param) {
    case 0:
      return 'default';
    case 1:
      return 'checkbox';
    case 2:
      return 'dense';
    case 3:
      return 'none';
  }
}

var Padding = /* module */ [/* to_string */ to_string$7];

function make$46(
  classes,
  className,
  component,
  numeric,
  padding,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Table.TableCell,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      component: Js_null_undefined.from_opt(component),
      numeric: unwrap_bool(numeric),
      padding: Js_null_undefined.from_opt(option_map(to_string$7, padding)),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var TableCell = /* module */ [/* Padding */ Padding, /* make */ make$46];

function make$47(classes, className, component, style, children) {
  return ReasonReact.wrapJsForReason(
    Table.TableFooter,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      component: Js_null_undefined.from_opt(component),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var TableFooter = /* module */ [/* make */ make$47];

function make$48(classes, className, component, style, children) {
  return ReasonReact.wrapJsForReason(
    Table.TableHead,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      component: Js_null_undefined.from_opt(component),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var TableHead = /* module */ [/* make */ make$48];

function make$49(
  classes,
  className,
  component,
  hover,
  selected,
  style,
  onClick,
  onDoubleClick,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Table.TableRow,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      component: Js_null_undefined.from_opt(component),
      hover: unwrap_bool(hover),
      selected: unwrap_bool(selected),
      style: Js_null_undefined.from_opt(style),
      onClick: Js_null_undefined.from_opt(onClick),
      onDoubleClick: Js_null_undefined.from_opt(onDoubleClick),
    },
    children,
  );
}

var TableRow = /* module */ [/* make */ make$49];

function make$50(classes, className, component, style, children) {
  return ReasonReact.wrapJsForReason(
    Table.default,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      component: Js_null_undefined.from_opt(component),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var Table$1 = /* module */ [/* make */ make$50];

function make$51(
  autoComplete,
  autoFocus,
  className,
  defaultValue,
  disabled,
  error,
  _FormHelperTextProps,
  fullWidth,
  helperText,
  helperTextClassName,
  id,
  inputClassName,
  _InputClassName,
  _InputLabelProps,
  inputProps,
  _InputProps,
  inputRef,
  label,
  labelClassName,
  multiline,
  name,
  onChange,
  placeholder,
  required,
  rootRef,
  rows,
  rowsMax,
  select,
  _SelectProps,
  _type,
  value,
  margin,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    TextField.default,
    {
      autoComplete: Js_null_undefined.from_opt(autoComplete),
      autoFocus: unwrap_bool(autoFocus),
      className: Js_null_undefined.from_opt(className),
      defaultValue: Js_null_undefined.from_opt(defaultValue),
      disabled: unwrap_bool(disabled),
      error: unwrap_bool(error),
      FormHelperTextProps: Js_null_undefined.from_opt(_FormHelperTextProps),
      fullWidth: unwrap_bool(fullWidth),
      helperText: Js_null_undefined.from_opt(helperText),
      helperTextClassName: Js_null_undefined.from_opt(helperTextClassName),
      id: Js_null_undefined.from_opt(id),
      inputClassName: Js_null_undefined.from_opt(inputClassName),
      InputClassName: Js_null_undefined.from_opt(_InputClassName),
      InputLabelProps: Js_null_undefined.from_opt(_InputLabelProps),
      inputProps: Js_null_undefined.from_opt(inputProps),
      InputProps: Js_null_undefined.from_opt(_InputProps),
      inputRef: Js_null_undefined.from_opt(inputRef),
      label: Js_null_undefined.from_opt(label),
      labelClassName: Js_null_undefined.from_opt(labelClassName),
      multiline: unwrap_bool(multiline),
      name: Js_null_undefined.from_opt(name),
      onChange: Js_null_undefined.from_opt(onChange),
      placeholder: Js_null_undefined.from_opt(placeholder),
      required: unwrap_bool(required),
      rootRef: Js_null_undefined.from_opt(rootRef),
      rows: Js_null_undefined.from_opt(option_map(unwrapValue, rows)),
      rowsMax: Js_null_undefined.from_opt(option_map(unwrapValue, rowsMax)),
      select: unwrap_bool(select),
      SelectProps: Js_null_undefined.from_opt(_SelectProps),
      type: Js_null_undefined.from_opt(_type),
      value: Js_null_undefined.from_opt(option_map(unwrapValue, value)),
      margin: Js_null_undefined.from_opt(option_map(to_string$3, margin)),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var TextField$1 = /* module */ [/* make */ make$51];

function make$52(classes, className, disableGutters, style, children) {
  return ReasonReact.wrapJsForReason(
    Toolbar.default,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      disableGutters: unwrap_bool(disableGutters),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var Toolbar$1 = /* module */ [/* make */ make$52];

function to_string$8(param) {
  switch (param) {
    case 0:
      return 'bottom-end';
    case 1:
      return 'bottom-start';
    case 2:
      return 'bottom';
    case 3:
      return 'left-end';
    case 4:
      return 'left-start';
    case 5:
      return 'left';
    case 6:
      return 'right-end';
    case 7:
      return 'right-start';
    case 8:
      return 'right';
    case 9:
      return 'top-end';
    case 10:
      return 'top-start';
    case 11:
      return 'top';
  }
}

var Placement = /* module */ [/* to_string */ to_string$8];

function make$53(
  classes,
  className,
  disableTriggerFocus,
  disableTriggerHover,
  disableTriggerTouch,
  id,
  onClose,
  onOpen,
  _open,
  title,
  enterDelay,
  leaveDelay,
  placement,
  popperProps,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Tooltip.default,
    {
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      disableTriggerFocus: unwrap_bool(disableTriggerFocus),
      disableTriggerHover: unwrap_bool(disableTriggerHover),
      disableTriggerTouch: unwrap_bool(disableTriggerTouch),
      id: Js_null_undefined.from_opt(id),
      onClose: Js_null_undefined.from_opt(onClose),
      onOpen: Js_null_undefined.from_opt(onOpen),
      open: unwrap_bool(_open),
      title: Js_null_undefined.from_opt(title),
      enterDelay: Js_null_undefined.from_opt(enterDelay),
      leaveDelay: Js_null_undefined.from_opt(leaveDelay),
      placement: Js_null_undefined.from_opt(option_map(to_string$8, placement)),
      PopperProps: Js_null_undefined.from_opt(popperProps),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var Tooltip$1 = /* module */ [/* Placement */ Placement, /* make */ make$53];

function make$54(
  align,
  classes,
  className,
  component,
  color,
  gutterBottom,
  headlineMapping,
  noWrap,
  paragraph,
  _type,
  style,
  children,
) {
  return ReasonReact.wrapJsForReason(
    Typography.default,
    {
      align: Js_null_undefined.from_opt(align),
      classes: Js_null_undefined.from_opt(classes),
      className: Js_null_undefined.from_opt(className),
      component: Js_null_undefined.from_opt(component),
      color: Js_null_undefined.from_opt(color),
      gutterBottom: unwrap_bool(gutterBottom),
      headlineMapping: Js_null_undefined.from_opt(headlineMapping),
      noWrap: unwrap_bool(noWrap),
      paragraph: unwrap_bool(paragraph),
      type: Js_null_undefined.from_opt(_type),
      style: Js_null_undefined.from_opt(style),
    },
    children,
  );
}

var Typography$1 = /* module */ [/* make */ make$54];

exports.unwrapValue = unwrapValue;
exports.unwrap_bool = unwrap_bool;
exports.option_map = option_map;
exports.AppBar = AppBar$1;
exports.Avatar = Avatar$1;
exports.Badge = Badge$1;
exports.ButtonBase = ButtonBase$1;
exports.Button = Button$1;
exports.CardActions = CardActions;
exports.CardContent = CardContent;
exports.CardHeader = CardHeader;
exports.CardMedia = CardMedia;
exports.Card = Card$1;
exports.Checkbox = Checkbox$1;
exports.Chip = Chip$1;
exports.CircularProgress = CircularProgress;
exports.Collapse = Collapse$1;
exports.DialogActions = DialogActions;
exports.DialogContentText = DialogContentText;
exports.DialogContent = DialogContent;
exports.DialogTitle = DialogTitle;
exports.Dialog = Dialog$1;
exports.Divider = Divider$1;
exports.Drawer = Drawer$1;
exports.Margin = Margin;
exports.FormControl = FormControl;
exports.FormControlLabel = FormControlLabel;
exports.FormGroup = FormGroup;
exports.FormHelperText = FormHelperText;
exports.FormLabel = FormLabel;
exports.Grid = Grid$1;
exports.Icon = Icon$1;
exports.IconButton = IconButton$1;
exports.InputLabel = InputLabel;
exports.Input = Input$1;
exports.LinearProgress = LinearProgress;
exports.ListItemAvatar = ListItemAvatar;
exports.ListItemIcon = ListItemIcon;
exports.ListItemSecondaryAction = ListItemSecondaryAction;
exports.ListItemText = ListItemText;
exports.ListItem = ListItem;
exports.ListSubheader = ListSubheader;
exports.List = List$1;
exports.Menu = Menu$1;
exports.MenuItem = MenuItem;
exports.Paper = Paper$1;
exports.Select = Select$1;
exports.Slide = Slide$1;
exports.Snackbar = Snackbar$1;
exports.TableBody = TableBody;
exports.TableCell = TableCell;
exports.TableFooter = TableFooter;
exports.TableHead = TableHead;
exports.TableRow = TableRow;
exports.Table = Table$1;
exports.TextField = TextField$1;
exports.Toolbar = Toolbar$1;
exports.Tooltip = Tooltip$1;
exports.Typography = Typography$1;
/* ReasonReact Not a pure module */
